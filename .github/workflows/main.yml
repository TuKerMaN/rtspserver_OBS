
name: 'CI Release'

on:
    release:
        types: [published]
    
    push:
        tags:
            - v[1-9].[0-9]+.[0-9]+
            - v[1-9][0-9]+.[0-9]+.[0-9]+

            - v[1-9].[0-9]+.[0-9]+-[a-z0-9]+
            - v[1-9][0-9]+.[0-9]+.[0-9]+-[a-z0-9]+
            
    workflow_dispatch:

env:
  PRODUCT_NAME: 'obs-rtspserver'
  DEPS_VERSION_MAC: '2022-02-13'
  DEPS_HASH_MAC: '77471b1d345a768e8efec3f6ad9dc79f3c7cd34840b66f721b80025d29713f5d'
  #QT_VERSION_MAC: '2022-02-13'
  QT_HASH_MAC: '13fbcc45fd9d08b30e702d481fe4d58b23f93aa06848cede4ebe0956c79a5e8a'
  DEPS_VERSION_WIN: '2022-02-13'
  QT_VERSION_WIN: '5.15.2'
  NSIS_VERSION_WIN: '3.08'
jobs:
  get_obs_info:
    name: '01 - Get obs-studio last release info'
    runs-on: [ubuntu-latest]
    outputs:
      latest_id: ${{ steps.latest_release.outputs.id }}
      latest_url: ${{ steps.latest_release.outputs.url }}
      latest_html_url: ${{ steps.latest_release.outputs.html_url }}
      latest_upload_url: ${{ steps.latest_release.outputs.upload_url }}
      latest_name: ${{ steps.latest_release.outputs.name }}
      latest_tag_name: ${{ steps.latest_release.outputs.tag_name }}
      latest_target_commitish: ${{ steps.latest_release.outputs.target_commitish }}
      latest_created_at: ${{ steps.latest_release.outputs.created_at }}
      latest_published_at: ${{ steps.latest_release.outputs.published_at }}
    steps:
      - name: Get latest release info
        id: latest_release
        uses: kaliber5/action-get-release@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          owner: 'obsproject'
          repo: 'obs-studio'
          latest: true
          
  get_plugin_info:
    name: '01 - Get plugin git info'
    runs-on: [ubuntu-latest]
    outputs:
      git_tag_name: ${{ steps.tag_name.outputs.tag }}
    steps:
      - name: 'Get plugin git tag'
        uses: little-core-labs/get-git-tag@v3.0.1
        id: tag_name
        #with:
          #tagRegex: "foobar-(.*)"  # Optional. Returns specified group text as tag name. Full tag string is returned if regex is not defined.
          #tagRegexGroup: 1 # Optional. Default is 1.
          
  clang_check:
    name: '02 - Code format check'
    runs-on: [ubuntu-latest]
    needs: [get_plugin_info]
    steps:
      - name: 'Checkout plugin ${{ needs.get_plugin_info.outputs.git_tag_name }}'
        uses: actions/checkout@v2.3.3
        with:
          path: 'plugin'
          ref: '${{ needs.get_plugin_info.outputs.git_tag_name }}'
          submodules: 'recursive'

      - name: 'Install clang-format'
        run: sudo apt-get install -y clang-format-12

      - name: 'Run clang-format'
        working-directory: 'plugin'
        run: |
          source CI/utility/formatcode.sh
          source CI/utility/check-format.sh
          
  windows_build:
    name: '03 - Windows (Latest)'
    runs-on: [windows-2019]
    needs: [get_obs_info, get_plugin_info, clang_check]
    strategy:
      matrix:
        arch: [64, 32]
    env:
      #CMAKE_GENERATOR: "Visual Studio 17 2022"
      CMAKE_SYSTEM_VERSION: "10.0.22000.0"
      OBS_VERSION: "${{ needs.get_obs_info.outputs.latest_tag_name }}"
    steps:
      - name: 'Add msbuild to PATH'
        uses: microsoft/setup-msbuild@v1.0.2

      - name: 'Checkout plugin ${{ needs.get_plugin_info.outputs.git_tag_name }}'
        uses: actions/checkout@v2.3.3
        with:
          path: 'plugin'
          ref: '${{ needs.get_plugin_info.outputs.git_tag_name }}'
          submodules: 'recursive'
          
      - name: 'Checkout OBS v${{ needs.get_obs_info.outputs.latest_tag_name }}'
        uses: actions/checkout@v2
        with:
          repository: obsproject/obs-studio
          path: 'obs-studio'
          ref: '${{ needs.get_obs_info.outputs.latest_tag_name }}'
          fetch-depth: 0
          submodules: 'recursive'
      
      - name: "Install Dependencies"
        working-directory: 'plugin'
        run: CI/windows/01_install_dependencies.ps1 -BuildArch ${{ matrix.arch }}-bit -NoChoco -InstallList "obs-deps","qt-deps","obs-studio"
        
      - name: 'Build libobs and obs-frontend-api'
        working-directory: 'plugin'
        run: CI/windows/02_build_obs_libs.ps1 -BuildArch "${{ matrix.arch }}-bit"
        
      - name: 'Build plugin'
        working-directory: 'plugin'
        run: CI/windows/03_build_plugin.ps1 -BuildArch "${{ matrix.arch }}-bit"
        
      - name: 'Create build artifact'
        working-directory: 'plugin'
        run: CI/windows/04_package_plugin.ps1 -BuildArch "${{ matrix.arch }}-bit"
        
      - name: 'Upload build Artifact'
        uses: actions/upload-artifact@v2
        with:
          name: '${{ env.PRODUCT_NAME }}-windows-${{ matrix.arch }}'
          path: '${{ github.workspace }}/plugin/*-windows-*.zip'
          
  windows_package:
    name: '04 - Windows Installer'
    runs-on: [windows-2019]
    needs: [get_plugin_info, windows_build]
    env:
      #CMAKE_GENERATOR: "Visual Studio 17 2022"
      CMAKE_SYSTEM_VERSION: "10.0.22000.0"
      OBS_VERSION: "${{ needs.get_obs_info.outputs.latest_tag_name }}"
    steps:
      - name: 'Checkout plugin ${{ needs.get_plugin_info.outputs.git_tag_name }}'
        uses: actions/checkout@v2.3.3
        with:
          path: 'plugin'
          ref: '${{ needs.get_plugin_info.outputs.git_tag_name }}'
          submodules: 'recursive'
          
      - name: 'Download 64-bit artifact'
        uses: actions/download-artifact@v2
        with:
          name: '${{ env.PRODUCT_NAME }}-windows-64'
          path: 'plugin'

      - name: 'Download 32-bit artifact'
        uses: actions/download-artifact@v2
        with:
          name: '${{ env.PRODUCT_NAME }}-windows-32'
          path: 'plugin'
          
      - name: "Install Dependencies"
        working-directory: 'plugin'
        run: CI/windows/01_install_dependencies.ps1 -BuildArch 64-bit -NoChoco -InstallList "nsis"
          
      - name: 'Build NSIS installer'
        working-directory: 'plugin'
        run: |
          Get-ChildItem -Filter "*-windows-x86.zip" -File | Expand-Archive -Force -DestinationPath ./release/
          Get-ChildItem -Filter "*-windows-x64.zip" -File | Expand-Archive -Force -DestinationPath ./release/
          CI/windows/04_package_plugin.ps1 -BuildArch 64-bit -BuildInstaller -CombinedArchs
        
      - name: 'Upload build Artifact'
        uses: actions/upload-artifact@v2
        with:
          name: '${{ env.PRODUCT_NAME }}-windows-release'
          path: '${{ github.workspace }}/plugin/${{ env.PRODUCT_NAME }}-*-windows-all*.*'

  create_changelog:
    name: '02 - Create Changelog'
    runs-on: [ubuntu-latest]
    needs: [get_plugin_info]
    outputs:
      changelog: "${{ steps.create_changelog_text.outputs.body }}\n\n**Full Changelog**: https://github.com/TuKerMaN/rtspserver_OBS/compare/${{ steps.get_last_release.outputs.tag_name }}...${{ needs.get_plugin_info.outputs.git_tag_name }}"

    steps:
      - name: 'Checkout plugin ${{ needs.get_plugin_info.outputs.git_tag_name }}'
        uses: actions/checkout@v2.3.3
        with:
          ref: '${{ needs.get_plugin_info.outputs.git_tag_name }}'
          fetch-depth: 0

      - name: 'Get last release info'
        id: get_last_release
        uses: kaliber5/action-get-release@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          latest: true
      
      - name: 'Create changelog text'
        id: create_changelog_text
        uses: dlavrenuek/conventional-changelog-action@v1.1.0
        with:
          from: "${{ steps.get_last_release.outputs.tag_name }}"
          to: "${{ needs.get_plugin_info.outputs.git_tag_name }}"
          config-file: "${{ github.workspace }}/.github/workflows/changelogConfig.json"


  create_release:
    name: '05 - Create release'
    runs-on: [ubuntu-latest]
    needs: [get_plugin_info, windows_package, create_changelog]

    steps:
      - name: 'Check whether the version is prerelease'
        uses: MeilCli/regex-match@v1.0.1
        id: prerelease_test
        with:
          search_string: ${{ needs.get_plugin_info.outputs.git_tag_name }}
          regex_pattern: "^v[1-9][0-9]*.[0-9]+.[0-9]+-[a-z0-9]+$"

      - name: 'Create release ${{ needs.get_plugin_info.outputs.git_tag_name }}'
        uses: ncipollo/release-action@v1
        id: create_release
        with:
          #bodyFile: "body.md"
          body: "${{ needs.create_changelog.outputs.changelog }}"
          draft: true
          prerelease: ${{ steps.prerelease_test.outputs.matched }}
          name: "${{ env.PRODUCT_NAME }} ${{ needs.get_plugin_info.outputs.git_tag_name }}"
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 'Download release artifacts'
        uses: actions/download-artifact@v2

      - name: 'Upload Windows .zip artifact to release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          #upload_url: ${{ github.event.release.upload_url }}
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ github.workspace }}/${{ env.PRODUCT_NAME }}-windows-release/${{ env.PRODUCT_NAME }}-${{ needs.get_plugin_info.outputs.git_tag_name }}-windows-all.zip
          asset_name: ${{ env.PRODUCT_NAME }}-${{ needs.get_plugin_info.outputs.git_tag_name }}-windows.zip
          asset_content_type: application/zip

      - name: 'Upload Windows .exe artifact to release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          #upload_url: ${{ github.event.release.upload_url }}
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ github.workspace }}/${{ env.PRODUCT_NAME }}-windows-release/${{ env.PRODUCT_NAME }}-${{ needs.get_plugin_info.outputs.git_tag_name }}-windows-all-installer.exe
          asset_name: ${{ env.PRODUCT_NAME }}-${{ needs.get_plugin_info.outputs.git_tag_name }}-windows-installer.exe
          asset_content_type: application/x-msdownload
          
